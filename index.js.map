{"version":3,"file":"index.js","sources":["src/module/create_gmaps_path.js","src/module/options.js","src/module/info_windows.js","src/module/open_close.js","src/module/create_map.js","src/module/close_info.js","src/module/markers.js","src/module/maploader.js","src/module/index.js","src/module/loaded_callback.js"],"sourcesContent":["/**\n * Google Maps path module.\n * @module create_gmaps_path\n * @see module:@djforth/gmaps_helper\n * Creates google map api path with relevant query strings\n *\n * type {function}\n * @param {string} key - Google Map API Key\n * @return {object} of functions to build path\n */\nexport default key => {\n  let gmaps, libraries, region;\n  gmaps = 'https://maps.google.com/maps/api/js?';\n  gmaps += `key=${key}`;\n  libraries = [];\n  region = 'uk';\n  var obj = {\n    /** Add Google maps libraries - see https://developers.google.com/maps/documentation/javascript/libraries\n     * @param {string} lib - Google Map Library\n     * @return {object} return self\n     */\n    addLibrary: lib => {\n      libraries.push(lib);\n      return obj;\n    },\n    /** Add region  code bias - https://developers.google.com/maps/documentation/javascript/examples/geocoding-region-es\n     * @param {string} reg - Region Code\n     * @return {object} return self\n     */\n    addRegion: reg => {\n      region = reg;\n      return obj;\n    },\n    /** Returns path\n     * @param {string} cb - Callback function name (must be on global scope)\n     * @return {string} return path\n     */\n    getPath: cb => {\n      if (libraries.length > 0) {\n        gmaps += `&libraries=${libraries.join(',')}`;\n      }\n      gmaps += '&async=2';\n      gmaps += `&region=${region}`;\n      gmaps += `&callback=${cb}`;\n\n      return gmaps;\n    },\n  };\n\n  return obj;\n};\n\n// For Ref - document.body.appendChild(createScript(`http://maps.google.com/maps/api/js?v=3.&key=AIzaSyC6BXa6juoBqO_aUO9pFlNMVD3wroMdTrc&libraries=geometry&async=2&region=uk&callback=${cb_str}`);\n","/* global google */\nconst setDefaults = ({ pins: dataPins, lng, lat }) => {\n  const pins = Array.isArray(dataPins) ? dataPins : [dataPins];\n  if (pins.length === 0) return { pins };\n  console.log(pins);\n  if (pins.length > 1 && !lng && !lat) {\n    return {\n      pins,\n      boundmap: true,\n    };\n  }\n\n  if (lng && lat) {\n    return {\n      pins,\n      lng,\n      lat,\n    };\n  }\n\n  return {\n    pins,\n    lng: pins[0].lng,\n    lat: pins[0].lat,\n  };\n};\n\nexport default dataset => {\n  var data;\n\n  if (dataset) {\n    data = JSON.parse(dataset);\n  }\n\n  let opts = {\n    autozoom: false,\n    boundmap: false,\n    centermap: false,\n    draggable: true,\n    optimized: false,\n    mapTypeControl: false,\n    scrollwheel: false,\n    type: 'ROADMAP',\n    zoom: 15,\n    zoomControl: true,\n    ...data,\n    ...setDefaults(data),\n  };\n\n  let object = {\n    addType: type => {\n      const newType = type || opts.type;\n      opts.mapTypeId = google.maps.MapTypeId[newType];\n\n      return object;\n    },\n    addCenter: (lat, lng) => {\n      const newLat = lat || opts.lat;\n      const newLng = lng || opts.lng;\n\n      opts.center = new google.maps.LatLng(newLat, newLng);\n\n      return object;\n    },\n    get: key => opts[key],\n    getAll: () => opts,\n    update: config => {\n      opts = { ...opts, ...config };\n      return object;\n    },\n  };\n\n  return object;\n};\n","/* global InfoBubble google */\nfunction createInfoBubble(maps, content, opts) {\n  let options = {\n    shadowStyle: 0,\n    padding: 0,\n    backgroundColor: '#55a440',\n    borderRadius: 0,\n    arrowSize: 2,\n    borderWidth: 0,\n    borderColor: '#2c2c2c',\n    disableAutoPan: false,\n    hideCloseButton: true,\n    arrowPosition: 50,\n    minHeight: 220,\n    backgroundClassName: 'infowindow clearfix',\n    arrowStyle: 2,\n    maps,\n    content,\n    ...opts,\n  };\n\n  // options.maps = map;\n  // options.content = info;\n\n  return new InfoBubble(options);\n}\n\nexport default (map, info, opts) => {\n  if (typeof InfoBubble !== 'undefined') {\n    return createInfoBubble(map, info, opts);\n  }\n\n  return new google.maps.InfoWindow({ content: info });\n};\n","/* global google InfoBubble */\nfunction addClose(map, id) {\n  return function(marker, infowindow) {\n    let elem = document.getElementById(`pin-${id}`);\n    /* istanbul ignore if  */\n    if (elem === null) return null;\n\n    google.maps.event.addDomListener(elem, 'click', function(e) {\n      e.preventDefault();\n      infowindow.close(map, marker);\n    });\n  };\n}\n\nexport default (map, id, closer) => {\n  let close = addClose(map, id);\n\n  return (marker, infowindow) => {\n    // console.log('infowindow >>>>', infowindow);\n    google.maps.event.addListener(marker, 'click', () => {\n      closer.closeAllWindows();\n      infowindow.open(map, marker);\n      /* istanbul ignore else  */\n      if (typeof InfoBubble !== 'undefined') {\n        google.maps.event.trigger(map, 'resize');\n        setTimeout(() => {\n          close(marker, infowindow);\n        }, 500);\n      }\n    });\n  };\n};\n","import closeInfo from './close_info';\nimport markerCreator from './markers';\n\n/* global InfoBubble google */\n\nfunction makeMarker(createMarker, closer) {\n  return function(mk) {\n    let marker = createMarker(mk);\n    closer.addMarkers(marker);\n    return marker;\n  };\n}\n\nfunction creator(markers, create) {\n  if (Array.isArray(markers)) {\n    return markers.map(mk => create(mk));\n  }\n  return [create(markers)];\n}\n\nconst centerMap = (map, markers) => LatLngBounds => {\n  let bounds = new LatLngBounds();\n  markers.forEach(mk => {\n    bounds.extend(mk.marker.getPosition());\n  });\n\n  map.fitBounds(bounds);\n};\n\nconst setZoom = (map, zoom) => event => {\n  var listener = event.addListener(map, 'idle', () => {\n    if (map.getZoom() !== zoom) {\n      map.setZoom(zoom);\n    }\n    event.removeListener(listener);\n  });\n};\n\n// return this.obj;\n\nexport default el => {\n  let map, markers;\n  if (!el) return null;\n  return (Map, options) => {\n    // Should tweak this - not side effect free\n    map = new Map(el, options.getAll());\n\n    let closer = closeInfo(map);\n    let create = makeMarker(markerCreator(map, closer), closer);\n\n    markers = creator(options.get('pins'), create);\n\n    var obj = {\n      centerMap: centerMap(map, markers),\n      getMap: () => map,\n      setPosition: LatLng => {\n        let pos = LatLng({ lat: options.get('lat'), lng: options.get('lng') });\n        map.setCenter(pos);\n      },\n      setZoom: setZoom(map, options.get('zoom')),\n    };\n\n    return obj;\n  };\n};\n","/**\n * Google Maps path module.\n * @module close_info\n * @see module:@djforth/gmaps_helper\n * Sets close info windows\n *\n * type {function}\n * @param {object} Map - Google Map Object\n * @return {object} of functions to build path\n */\n\nexport default map => {\n  let markers = [];\n  return {\n    /** Add markers to list\n     * @param {array} or Object m - marker array or Object\n     */\n    addMarkers: m => {\n      if (Array.isArray(m)) {\n        markers = markers.concat(m);\n        return;\n      }\n\n      markers.push(m);\n    },\n    /** Close all windows */\n    closeAllWindows: () => {\n      markers.forEach(mk => {\n        if (mk.hasOwnProperty('info') && mk.hasOwnProperty('marker')) {\n          mk.info.close(map, mk.marker);\n        }\n      });\n    },\n    /** Returns mark list\n     * @return {array} - markers array\n     */\n    getAll: () => markers,\n  };\n};\n","/* global google */\nimport createInfoWindow from './info_windows';\nimport addOpenClose from './open_close';\n\n/**\n * Marker module.\n * @module marker\n * @see module:@djforth/googlemap\n */\n\nconst checkMarker = marker => typeof marker.setIcon === 'function';\n\n/** Creates custom map marker */\nconst setIcon = (marker, icon) => {\n  if (!checkMarker(marker)) return;\n  if (icon.picture && icon.width && icon.height) {\n    marker.setIcon(icon.picture, [icon.width, icon.height]);\n  }\n};\n\n/**\n * map\n * Will create google map marker\n *\n * type {function}\n * @param {function} map - Google map object\n * @param {function} closer - Function to apply close method all to info windows\n * @params {object} info window options\n * @return {object} marker & info(window)\n */\nexport default (map, closer, opts) => mk => {\n  const { lng, lat } = mk;\n  let marker = new google.maps.Marker({\n    position: new google.maps.LatLng(lat, lng),\n    map: map,\n  });\n\n  setIcon(marker, mk);\n  let infoWindow;\n\n  if (mk.infowindow) {\n    infoWindow = createInfoWindow(map, mk.infowindow, opts);\n    let infoActions = addOpenClose(map, mk.id, closer);\n    infoActions(marker, infoWindow);\n  }\n\n  return { marker: marker, info: infoWindow };\n};\n","/** Creates Script tag to load api code */\nfunction createScript(path, id) {\n  var script = document.createElement('script');\n  script.id = id;\n  script.type = 'text/javascript';\n  script.src = path;\n  return script;\n}\n\n/** Plugin loader */\nfunction loadPlugins(plugins) {\n  if (Array.isArray(plugins) && plugins.length > 0) {\n    plugins.forEach((p, i) => {\n      if (p !== undefined) {\n        document.body.appendChild(createScript(p, `plugin${i}`));\n      }\n    });\n  }\n}\n\n/**\n * Maploader module.\n * @module maploader\n * @see module:@djforth/gmaps_helper\n * Loads googlemap API & and plugin code async\n *\n * type {function}\n * @param {string} Path to Google Map API with Query Strings\n * @return {object} of functions to build path\n */\nexport default path => {\n  let plugins = [];\n  var obj = {\n    /** Add plugins */\n    addPlugins: p => {\n      if (Array.isArray(p)) {\n        plugins = plugins.concat(p);\n      } else if (typeof p === 'string') {\n        plugins.push(p);\n      }\n\n      return obj;\n    },\n    /** load google api */\n    load: () => {\n      if (!document.getElementById('gmapsScripts')) {\n        document.body.appendChild(createScript(path, 'gmapsScripts'));\n        loadPlugins(plugins);\n      }\n    },\n  };\n\n  return obj;\n  // For Ref - document.body.appendChild(createScript(`http://maps.google.com/maps/api/js?v=3.&key=AIzaSyC6BXa6juoBqO_aUO9pFlNMVD3wroMdTrc&libraries=geometry&async=2&region=uk&callback=${cb_str}`);\n};\n","import partial from 'lodash/partial';\n\nimport createPath from './create_gmaps_path';\nimport getOptions from './options';\n// import LazyLoad from './lazyload';\nimport mapCreator from './create_map';\nimport mapLoader from './maploader';\nimport LoadedCallback from './loaded_callback';\n\nif (!Array.isArray) {\n  Array.isArray = function(arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n  };\n}\n\n/* global InfoBubble google */\n\nconst findMap = maps => id => {\n  const map = maps.find(({ id: mapId }) => id === mapId);\n  if (map) return map.options;\n};\n\n/**\n * Googlemap module.\n * @module @djforth/googlemap\n */\n\n/**\n * map\n * Will create google map\n *\n * type {function}\n * @param {string} key - Google Map API Key\n * @return {object} of functions to build path\n */\nexport default key => {\n  let lazyload = false;\n\n  const mapEls = [...document.querySelectorAll('[data-map]')];\n  if (mapEls.length === 0) return;\n  // el = document.getElementById(id);\n  // if (!isElement(el)) return;\n\n  const gmapsPath = createPath(key);\n  const maps = mapEls.map(el => ({\n    options: getOptions(el.dataset.map),\n    map: mapCreator(el),\n    id: el.id,\n  }));\n\n  const finder = findMap(maps);\n\n  const callback = LoadedCallback(maps);\n  window.mapLoaded = callback;\n\n  var obj = {\n    /** Adds callback to map creation\n     * param {function} callback\n     */\n    addCallback: cb => {\n      window.mapLoaded = partial(callback, cb);\n      return obj;\n    },\n    /** Add centre map position\n     * param {string} id - id of map\n     * param {integer} lat - latitude\n     * param {integer} lng - longitude\n     */\n    addCenter: (id, lat, lng) => {\n      const options = finder(id);\n      if (!options) return obj;\n      options.update({ lat: lat, lng: lng, centermap: true });\n      return obj;\n    },\n    /** Add gmaps config\n     * param {object} config object\n     */\n    addConfig: (id, config) => {\n      const options = finder(id);\n      if (!options) return obj;\n      options.update(config);\n      return obj;\n    },\n    /** Adds lazy load\n     * param {string} type - Event type\n     */\n    // addlazyload: type => {\n    //   lazyload = true;\n    //   LazyLoad(el, type, removeLoader => {\n    //     removeLoader();\n    //     mapLoader(gmapsPath.getPath('mapLoaded'))\n    //       .addPlugins(options.get('plugins'))\n    //       .load();\n    //   });\n    // },\n    /** Adds new google map plugin\n     * param {string} type - Event type\n     */\n    addLibraries: (id, libraries) => {\n      const options = finder(id);\n      if (!options) return obj;\n      options.update({ libraries: libraries });\n      return obj;\n    },\n    /** Sets google map type\n     * param {string} type - Map type */\n    addType: (id, type) => {\n      const options = finder(id);\n      if (!options) return obj;\n      options.update({ type: type });\n      return obj;\n    },\n\n    getMaps: () => maps,\n    /** Loads map */\n    load: () => {\n      if (!lazyload) {\n        const libraries = maps.reduce((libs, { options }) => libs.concat(options.get('libraries')), []);\n\n        mapLoader(gmapsPath.getPath('mapLoaded'))\n          .addPlugins(libraries)\n          .load();\n      }\n    },\n\n    setBounds: id => {\n      const options = finder(id);\n      if (!options) return obj;\n      options.update({ boundmap: true });\n      return obj;\n    },\n\n    setZoom: (id, z) => {\n      const options = finder(id);\n      if (!options) return obj;\n      options.update({ zoom: z, autozoom: true });\n      return obj;\n    },\n  };\n\n  return obj;\n};\n","/* global InfoBubble google */\n\nexport default maps => {\n  let m = Array.isArray(maps) ? maps : [maps];\n  return function(cb) {\n    const gmaps = m.map(({ map, options }) => {\n      options.addType();\n      options.addCenter();\n      const gmap = map(google.maps.Map, options);\n      if (options.get('boundmap')) {\n        gmap.centerMap(google.maps.LatLngBounds);\n      }\n      if (options.get('autozoom')) {\n        gmap.setZoom(google.maps.event);\n      }\n      return gmap.getMap();\n    });\n\n    if (typeof cb === 'function') cb(gmaps);\n  };\n};\n"],"names":["data","dataset","JSON","parse","dataPins","lng","lat","pins","opts","Array","isArray","length","log","object","newType","type","mapTypeId","google","maps","MapTypeId","newLat","newLng","center","LatLng","key","config","map","info","InfoBubble","content","options","createInfoBubble","InfoWindow","id","closer","close","marker","infowindow","elem","document","getElementById","event","addDomListener","e","preventDefault","addClose","addListener","closeAllWindows","open","trigger","markers","el","Map","m","concat","push","forEach","mk","hasOwnProperty","closeInfo","getAll","create","createMarker","addMarkers","makeMarker","Marker","icon","setIcon","checkMarker","picture","width","height","infoWindow","createInfoWindow","addOpenClose","markerCreator","creator","get","bounds","LatLngBounds","extend","getPosition","fitBounds","centerMap","pos","setCenter","zoom","listener","getZoom","setZoom","removeListener","createScript","path","script","createElement","src","plugins","obj","p","body","appendChild","i","undefined","arg","Object","prototype","toString","call","mapEls","querySelectorAll","gmapsPath","gmaps","libraries","region","lib","reg","join","cb","createPath","getOptions","mapCreator","finder","find","mapId","findMap","callback","addType","addCenter","gmap","getMap","LoadedCallback","mapLoaded","partial","update","centermap","reduce","libs","getPath","addPlugins","load","boundmap","z","autozoom"],"mappings":"8RAUA,0LCkBMA,EAEAC,MACKC,KAAKC,MAAMF,UA9BOG,EAAUC,EAAKC,EACpCC,EAgCFC,eACQ,YACA,aACC,aACA,aACA,kBACK,eACH,OACP,eACA,gBACO,GACVR,GA5CsBI,KA6CVJ,GA7CIO,KAAgBF,IAAAA,IAAKC,IAAAA,IAEtB,KADdC,EAAOE,MAAMC,QAAQN,GAAYA,GAAYA,IAC1CO,QAAuBJ,iBACxBK,IAAIL,GACRA,EAAKI,OAAS,IAAMN,IAAQC,oBAGlB,GAIVD,GAAOC,mCAUJC,EAAK,GAAGF,QACRE,EAAK,GAAGD,QA0BXO,WACO,gBACDC,EAAUC,GAAQP,EAAKO,cACxBC,UAAYC,OAAOC,KAAKC,UAAUL,GAEhCD,aAEE,SAACP,EAAKD,OACTe,EAASd,GAAOE,EAAKF,IACrBe,EAAShB,GAAOG,EAAKH,aAEtBiB,OAAS,IAAIL,OAAOC,KAAKK,OAAOH,EAAQC,GAEtCR,OAEJ,mBAAOL,EAAKgB,WACT,kBAAMhB,UACN,0BACMA,EAASiB,GACdZ,WAIJA,GC7CT,eAAgBa,EAAKC,EAAMnB,SACC,oBAAfoB,WA3Bb,SAA0BV,EAAMW,EAASrB,OACnCsB,iBACW,UACJ,kBACQ,uBACH,YACH,cACE,cACA,0BACG,mBACC,gBACF,aACJ,wBACU,iCACT,oBAGTtB,UAME,IAAIoB,WAAWE,GAKbC,CAAiBL,EAAKC,EAAMnB,GAG9B,IAAIS,OAAOC,KAAKc,YAAaH,QAASF,KClB/C,eAAgBD,EAAKO,EAAIC,OACnBC,EAdN,SAAkBT,EAAKO,UACd,SAASG,EAAQC,OAClBC,EAAOC,SAASC,sBAAsBP,MAE7B,OAATK,EAAe,OAAO,YAEnBpB,KAAKuB,MAAMC,eAAeJ,EAAM,QAAS,SAASK,KACrDC,mBACST,MAAMT,EAAKU,MAMdS,CAASnB,EAAKO,UAEnB,SAACG,EAAQC,UAEPnB,KAAKuB,MAAMK,YAAYV,EAAQ,QAAS,aACtCW,oBACIC,KAAKtB,EAAKU,GAEK,oBAAfR,oBACFV,KAAKuB,MAAMQ,QAAQvB,EAAK,qBACpB,aACHU,EAAQC,IACb,UCPX,sBAqBMX,SAAKwB,gBACJC,EACE,SAACC,EAAKtB,OAIPI,kBCnCFgB,uBAKU,YACNzC,MAAMC,QAAQ2C,KACNH,EAAQI,OAAOD,KAInBE,KAAKF,oBAGE,aACPG,QAAQ,YACVC,EAAGC,eAAe,SAAWD,EAAGC,eAAe,aAC9C/B,KAAKQ,MAAMT,EAAK+B,EAAGrB,kBAOpB,kBAAMc,IDWDS,GAFP,IAAIP,EAAID,EAAIrB,EAAQ8B,WAGtBC,EA3CR,SAAoBC,EAAc5B,UACzB,SAASuB,OACVrB,EAAS0B,EAAaL,YACnBM,WAAW3B,GACXA,GAuCM4B,UElBDtC,EAAKQ,EAAQ1B,UAAS,gBAC5BH,EAAaoD,EAAbpD,IAAKC,EAAQmD,EAARnD,IACT8B,EAAS,IAAInB,OAAOC,KAAK+C,iBACjB,IAAIhD,OAAOC,KAAKK,OAAOjB,EAAKD,OACjCqB,KArBO,SAACU,EAAQ8B,IAHL,kBAAoC,mBAAnB9B,EAAO+B,SAIrCC,CAAYhC,IACb8B,EAAKG,SAAWH,EAAKI,OAASJ,EAAKK,UAC9BJ,QAAQD,EAAKG,SAAUH,EAAKI,MAAOJ,EAAKK,UAqBzCnC,EAAQqB,OACZe,gBAEAf,EAAGpB,eACQoC,EAAiB/C,EAAK+B,EAAGpB,WAAY7B,GAChCkE,EAAahD,EAAK+B,EAAGxB,GAAIC,GAC/BE,EAAQoC,KAGbpC,OAAQA,EAAQT,KAAM6C,IFELG,CAAcjD,EAAKQ,GAASA,YAnCxD,SAAiBgB,EAASW,UACpBpD,MAAMC,QAAQwC,GACTA,EAAQxB,IAAI,mBAAMmC,EAAOJ,MAE1BI,EAAOX,IAiCH0B,CAAQ9C,EAAQ+C,IAAI,QAAShB,cA9BzB,SAACnC,EAAKwB,UAAY,gBAC9B4B,EAAS,IAAIC,IACTvB,QAAQ,cACPwB,OAAOvB,EAAGrB,OAAO6C,mBAGtBC,UAAUJ,IA2BCK,CAAUzD,EAAKwB,UAClB,kBAAMxB,eACD,gBACP0D,EAAM7D,GAASjB,IAAKwB,EAAQ+C,IAAI,OAAQxE,IAAKyB,EAAQ+C,IAAI,WACzDQ,UAAUD,YA5BN,SAAC1D,EAAK4D,UAAS,gBACzBC,EAAW9C,EAAMK,YAAYpB,EAAK,OAAQ,WACxCA,EAAI8D,YAAcF,KAChBG,QAAQH,KAERI,eAAeH,MAyBVE,CAAQ/D,EAAKI,EAAQ+C,IAAI,WAjBtB,MGzClB,SAASc,EAAaC,EAAM3D,OACtB4D,EAAStD,SAASuD,cAAc,mBAC7B7D,GAAKA,IACLlB,KAAO,oBACPgF,IAAMH,EACNC,EAwBT,sBACMG,KACAC,cAEU,mBACNxF,MAAMC,QAAQwF,KACNF,EAAQ1C,OAAO4C,GACH,iBAANA,KACR3C,KAAK2C,GAGRD,QAGH,WACC1D,SAASC,eAAe,2BAClB2D,KAAKC,YAAYT,EAAaC,EAAM,iBApCrD,SAAqBI,GACfvF,MAAMC,QAAQsF,IAAYA,EAAQrF,OAAS,KACrC6C,QAAQ,SAAC0C,EAAGG,QACRC,IAANJ,YACOC,KAAKC,YAAYT,EAAaO,WAAYG,OAiCvCL,aAKXC,GC3CJxF,MAAMC,gBACHA,QAAU,SAAS6F,SACwB,mBAAxCC,OAAOC,UAAUC,SAASC,KAAKJ,4BA2BlCK,mIAAarE,SAASsE,iBAAiB,mBACvB,IAAlBD,EAAOjG,YAILmG,kBRhCFC,SAAOC,SAAWC,WACd,iDACQzF,SAEP,SACLyE,cAKU,qBACA1C,KAAK2D,GACRjB,aAME,qBACAkB,EACFlB,WAMA,mBACHe,EAAUrG,OAAS,qBACEqG,EAAUI,KAAK,SAE/B,yBACWH,kBACEI,WAMnBpB,EQNWqB,CAAW9F,GACvBN,EAAO0F,EAAOlF,IAAI,2BACb6F,EAAWpE,EAAGlD,QAAQyB,SAC1B8F,EAAWrE,MACZA,EAAGlB,MAGHwF,EAjCQ,mBAAQ,gBAChB/F,EAAMR,EAAKwG,KAAK,gBAAOC,IAAJ1F,UAAgBA,IAAO0F,OAC5CjG,EAAK,OAAOA,EAAII,SA+BL8F,CAAQ1G,GAEjB2G,kBCjDFxE,EAAI5C,MAAMC,QAAQQ,GAAQA,GAAQA,UAC/B,SAASmG,OACRN,EAAQ1D,EAAE3B,IAAI,gBAAGA,IAAAA,IAAKI,IAAAA,UAClBgG,YACAC,gBACFC,EAAOtG,EAAIT,OAAOC,KAAKkC,IAAKtB,UAC9BA,EAAQ+C,IAAI,eACTM,UAAUlE,OAAOC,KAAK6D,cAEzBjD,EAAQ+C,IAAI,eACTY,QAAQxE,OAAOC,KAAKuB,OAEpBuF,EAAKC,WAGI,mBAAPZ,GAAmBA,EAAGN,IDkClBmB,CAAehH,UACzBiH,UAAYN,MAEf5B,eAIW,0BACJkC,UAAYC,EAAQP,EAAUR,GAC9BpB,aAOE,SAAChE,EAAI3B,EAAKD,OACbyB,EAAU2F,EAAOxF,UAClBH,KACGuG,QAAS/H,IAAKA,EAAKD,IAAKA,EAAKiI,WAAW,IACzCrC,GAFcA,aAOZ,SAAChE,EAAIR,OACRK,EAAU2F,EAAOxF,UAClBH,KACGuG,OAAO5G,GACRwE,GAFcA,gBAmBT,SAAChE,EAAI+E,OACXlF,EAAU2F,EAAOxF,UAClBH,KACGuG,QAASrB,UAAWA,IACrBf,GAFcA,WAMd,SAAChE,EAAIlB,OACNe,EAAU2F,EAAOxF,UAClBH,KACGuG,QAAStH,KAAMA,IAChBkF,GAFcA,WAKd,kBAAM/E,QAET,eAEI8F,EAAY9F,EAAKqH,OAAO,SAACC,SAAQ1G,IAAAA,eAAc0G,EAAKlF,OAAOxB,EAAQ+C,IAAI,qBAEnEiC,EAAU2B,QAAQ,cACzBC,WAAW1B,GACX2B,kBAII,gBACH7G,EAAU2F,EAAOxF,UAClBH,KACGuG,QAASO,UAAU,IACpB3C,GAFcA,WAKd,SAAChE,EAAI4G,OACN/G,EAAU2F,EAAOxF,UAClBH,KACGuG,QAAS/C,KAAMuD,EAAGC,UAAU,IAC7B7C,GAFcA,WAMlBA"}